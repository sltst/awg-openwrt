name: Build AWG for GL.iNet Mudi V2

on:
  workflow_dispatch:
    inputs:
      owrt_version:
        description: "OpenWrt version"
        required: true
        default: "22.03.4"
      release_tag:
        description: "Release tag (GitHub release name)"
        required: true
        default: "v0.1.0"
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERMAGIC_EXPECTED: "5.10.176-1-458ea791ab57701ad5359ae6568f3fd9"

    strategy:
      matrix:
        build_env:
          - target: "ath79"
            subtarget: "nand"
            pkgarch: "mips_24kc"

    steps:
      - name: Checkout OpenWrt sources
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: v${{ github.event.inputs.owrt_version || github.ref_name }}
          fetch-depth: 0

      - name: Setup feeds
        run: |
          wget https://downloads.openwrt.org/releases/${{ github.event.inputs.owrt_version }}/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/feeds.buildinfo -O feeds.conf
          echo "src-git awgopenwrt https://github.com/Slava-Shchipunov/awg-openwrt.git" >> feeds.conf
          ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: Setup config
        run: |
          wget https://downloads.openwrt.org/releases/${{ github.event.inputs.owrt_version }}/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config
          make defconfig

      - name: Build toolchain and kernel
        run: |
          make tools/install -i -j$(nproc)
          make toolchain/install -i -j$(nproc)
          make target/linux/compile -i -j$(nproc) V=s

          VERMAGIC=$(cat ./build_dir/target-*/linux-*/linux-*/.vermagic)
          echo "Vermagic from build: $VERMAGIC"
          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo "‚ùå Vermagic mismatch: expected $VERMAGIC_EXPECTED, got $VERMAGIC"
            exit 1
          fi

      - name: Build AmneziaWG packages
        run: |
          make package/kmod-amneziawg/{clean,download,prepare,compile} V=s || true
          make package/amneziawg-tools/{clean,download,prepare,compile} V=s
          make package/luci-app-amneziawg/{clean,download,prepare,compile} V=s

      - name: Prepare artifacts
        run: |
          mkdir -p awgrelease
          postfix="v${{ github.event.inputs.owrt_version }}_${{ matrix.build_env.pkgarch }}_${{ matrix.build_env.target }}_${{ matrix.build_env.subtarget }}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk || true
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk || true
          cp bin/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: awg-ipks
          path: awgrelease/

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
          files: awgrelease/*.ipk
